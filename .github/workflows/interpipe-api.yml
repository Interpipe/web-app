name: Interpipe API CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'interpipe-api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'interpipe-api/**'

defaults:
  run:
    working-directory: interpipe-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: interpipe-api/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npx prisma generate
      
    # If you have tests, uncomment this step
    # - name: Run tests
    #   run: npm test
  
  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: interpipe-api/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts
      
    - name: Create deployment package
      run: |
        # Create a deployment package
        tar -czf deployment.tar.gz dist package.json package-lock.json prisma scripts
        
    - name: Deploy to DigitalOcean
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH || '/var/www/interpipe-api' }}
      run: |
        # Create scripts directory on server
        ssh root@$DROPLET_IP "mkdir -p $DEPLOY_PATH/scripts $DEPLOY_PATH/releases $DEPLOY_PATH/backups"
        
        # Copy the deployment script to the server first
        scp -r scripts/deploy.sh root@$DROPLET_IP:$DEPLOY_PATH/scripts/
        
        # Make the deployment script executable
        ssh root@$DROPLET_IP "chmod +x $DEPLOY_PATH/scripts/deploy.sh"
        
        # Copy the deployment package to the server
        scp deployment.tar.gz root@$DROPLET_IP:$DEPLOY_PATH/
        
        # Execute deployment script on the server
        ssh root@$DROPLET_IP "bash $DEPLOY_PATH/scripts/deploy.sh" 